/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* searchRange(int* nums, int numsSize, int target, int* returnSize){
    int* ans = (int*)malloc(sizeof(int)*2);
    *returnSize = 2;
    ans[0] = -1;
    ans[1] = -1;
    int flag = 0;
    for( int i = 0 ; i < numsSize ; i++)
    {
        if((nums[i] == target) && !(flag))
        {
            flag = 1;
            ans[0] = i;
            continue;
        }
        if(flag)
        {   
            if(nums[i] != target)
            {
                ans[1] = i-1;
                return ans;
            } 
            if((nums[i] == target) && (i == numsSize - 1))
            {
                ans[1] = i;
                return ans;
            }
        }
    }
    if(ans[0] > -1 && ans[1] < numsSize)
        ans[1] = ans[0];
    return ans;
}



-------------------------------------------------------------------------------------------------



/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int binarySearch(int* nums , int numsSize, int target, bool findLeft) {
        int low = 0 , high = numsSize - 1 , index = -1;
        while (low <= high) 
        {
            int mid = low + (high - low) / 2;
            if (nums[mid] == target) 
            {
                index = mid;
                if (findLeft)
                    high = mid - 1;
                else
                    low = mid + 1;
            } 
            else if (nums[mid] < target)
                low = mid + 1;
            else
                high = mid - 1;
        }
        return index;
    }
int* searchRange(int* nums, int numsSize, int target, int* returnSize){
    int* ans = (int*)malloc(sizeof(int)*2);
    *returnSize = 2;
    ans[0] = -1;
    ans[1] = -1;
    int left = binarySearch(nums,numsSize, target, true);
    int right = binarySearch(nums,numsSize, target, false);
    if (left <= right) 
    {
        ans[0] = left;
        ans[1] = right;
    }
    return ans;
}




------------------------------------------------------------------------------------------------------------------



/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* searchRange(int* nums, int numsSize, int target, int* returnSize){
    int start = 0 , mid , end = numsSize;

    /* initialize the return data structure */
    int *result = (int *)malloc(2*sizeof(int));
    result[0] = -1;
    result[1] = -1;
    *returnSize = 2;

    /* don't bother doing anything if numsSize is 0 */
    if (numsSize == 0)
        return result;

    /* find the start index */
    while(start < end) 
    {
        mid = (start + end) / 2;
        if (nums[mid] == target) 
        {
            if (mid == 0 || nums[mid-1] != target) 
            {
                result[0] = mid;
                break;
            }
            else
                end = mid;
        }
        else if (nums[mid] < target)
            start = mid + 1;
        else 
            end = mid;
    }

    /* if no start index found, return */
    if (result[0] == -1)
        return result;

    /* find the end index */
    start = result[0];
    end = numsSize; 
    while(start < end) 
    {
        mid = (start + end) / 2;
        if (nums[mid] == target) 
        {
            if (mid == (numsSize - 1) || nums[mid + 1] != target) 
            {
                result[1] = mid;
                break;
            }
            else
                start = mid + 1;
        }
        else
            end = mid;
    }
    return result;
}
